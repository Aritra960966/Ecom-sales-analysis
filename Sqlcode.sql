-- Basic Queries

-- 1. List all unique cities where customers are located.
SELECT DISTINCT city
FROM Customers;

-- 2. Count the number of orders placed in 2017.
SELECT COUNT(*) AS order_count_2017
FROM Orders
WHERE YEAR(order_date) = 2017;

-- 3. Find the total sales per category.
SELECT c.category_name, SUM(oi.quantity * oi.price) AS total_sales
FROM OrderItems oi
JOIN Products p ON oi.product_id = p.product_id
JOIN Categories c ON p.category_id = c.category_id
GROUP BY c.category_name;

-- 4. Calculate the percentage of orders that were paid in installments.
SELECT 
    (SUM(CASE WHEN payment_type = 'Installment' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_installments
FROM Orders;

-- 5. Count the number of customers from each state.
SELECT state, COUNT(*) AS customer_count
FROM Customers
GROUP BY state;

-- Intermediate Queries

-- 1. Calculate the number of orders per month in 2018.
SELECT 
    MONTH(order_date) AS month,
    COUNT(*) AS order_count
FROM Orders
WHERE YEAR(order_date) = 2018
GROUP BY MONTH(order_date)
ORDER BY month;

-- 2. Find the average number of products per order, grouped by customer city.
SELECT 
    c.city,
    AVG(product_count) AS avg_products_per_order
FROM (
    SELECT 
        o.order_id,
        c.city,
        COUNT(oi.order_item_id) AS product_count
    FROM Orders o
    JOIN Customers c ON o.customer_id = c.customer_id
    JOIN OrderItems oi ON o.order_id = oi.order_id
    GROUP BY o.order_id, c.city
) AS order_products
GROUP BY city;

-- 3. Calculate the percentage of total revenue contributed by each product category.
WITH CategoryRevenue AS (
    SELECT 
        c.category_name,
        SUM(oi.quantity * oi.price) AS total_revenue
    FROM OrderItems oi
    JOIN Products p ON oi.product_id = p.product_id
    JOIN Categories c ON p.category_id = c.category_id
    GROUP BY c.category_name
),
TotalRevenue AS (
    SELECT SUM(total_revenue) AS total_revenue FROM CategoryRevenue
)
SELECT 
    cr.category_name,
    cr.total_revenue,
    (cr.total_revenue / tr.total_revenue) * 100 AS revenue_percentage
FROM CategoryRevenue cr, TotalRevenue tr;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.
SELECT 
    p.price,
    COUNT(oi.order_item_id) AS purchase_count
FROM OrderItems oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.price;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
WITH SellerRevenue AS (
    SELECT 
        s.seller_id,
        s.seller_name,
        SUM(o.total_amount) AS total_revenue
    FROM Orders o
    JOIN Sellers s ON o.seller_id = s.seller_id
    GROUP BY s.seller_id, s.seller_name
)
SELECT 
    seller_name,
    total_revenue,
    RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank
FROM SellerRevenue;

-- Advanced Queries

-- 1. Calculate the moving average of order values for each customer over their order history.
WITH OrderValues AS (
    SELECT 
        customer_id,
        order_date,
        total_amount
    FROM Orders
),
MovingAverage AS (
    SELECT
        customer_id,
        order_date,
        total_amount,
        AVG(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
    FROM OrderValues
)
SELECT * FROM MovingAverage;

-- 2. Calculate the cumulative sales per month for each year.
WITH MonthlySales AS (
    SELECT
        YEAR(order_date) AS year,
        MONTH(order_date) AS month,
        SUM(total_amount) AS monthly_sales
    FROM Orders
    GROUP BY YEAR(order_date), MONTH(order_date)
)
SELECT 
    year,
    month,
    SUM(monthly_sales) OVER (PARTITION BY year ORDER BY month) AS cumulative_sales
FROM MonthlySales;

-- 3. Calculate the year-over-year growth rate of total sales.
WITH YearlySales AS (
    SELECT 
        YEAR(order_date) AS year,
        SUM(total_amount) AS total_sales
    FROM Orders
    GROUP BY YEAR(order_date)
)
SELECT 
    current.year,
    current.total_sales,
    LAG(current.total_sales) OVER (ORDER BY current.year) AS previous_year_sales,
    ((current.total_sales - LAG(current.total_sales) OVER (ORDER BY current.year)) / LAG(current.total_sales) OVER (ORDER BY current.year)) * 100 AS growth_rate
FROM YearlySales current;

-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
WITH FirstPurchase AS (
    SELECT 
        customer_id,
        MIN(order_date) AS first_purchase_date
    FROM Orders
    GROUP BY customer_id
),
SubsequentPurchases AS (
    SELECT 
        fp.customer_id,
        COUNT(o.order_id) AS subsequent_orders
    FROM FirstPurchase fp
    JOIN Orders o ON fp.customer_id = o.customer_id
    WHERE o.order_date > fp.first_purchase_date
    AND o.order_date <= DATEADD(MONTH, 6, fp.first_purchase_date)
    GROUP BY fp.customer_id
)
SELECT 
    (COUNT(sp.customer_id) * 100.0 / COUNT(fp.customer_id)) AS retention_rate
FROM FirstPurchase fp
LEFT JOIN SubsequentPurchases sp ON fp.customer_id = sp.customer_id;

-- 5. Identify the top 3 customers who spent the most money in each year.
WITH YearlyCustomerSpending AS (
    SELECT 
        YEAR(o.order_date) AS year,
        o.customer_id,
        SUM(o.total_amount) AS total_spent
    FROM Orders o
    GROUP BY YEAR(o.order_date), o.customer_id
),
RankedCustomers AS (
    SELECT 
        year,
        customer_id,
        total_spent,
        RANK() OVER (PARTITION BY year ORDER BY total_spent DESC) AS rank
    FROM YearlyCustomerSpending
)
SELECT 
    year,
    customer_id,
    total_spent
FROM RankedCustomers
WHERE rank <= 3;
